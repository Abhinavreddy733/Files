{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/abhinav-reddy/Files/db/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.Types.ObjectId;\n\n// 1. User Schema\nconst userSchema = new Schema({\n  username: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\n// 2. Project Schema\nconst projectSchema = new Schema({\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  owner: { type: ObjectId, ref: \"User\", required: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\n// 3. Project File Schema\nconst projectFileSchema = new Schema({\n  name: { type: String, required: true },\n  type: { type: String, default:\"txt\" },\n  project: { type: ObjectId, ref: \"Project\", required: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\n// 4. Project File Content Schema\nconst projectFileContentSchema = new Schema({\n  content: { type: String, required: true },\n  projectFile: { type: ObjectId, ref: \"ProjectFile\", required: true, unique: true },\n  createdAt: { type: Date, default: Date.now },\n  lastUpdated: { type: Date, default: Date.now },\n});\n\n// Prevent OverwriteModelError\nexport const User = mongoose.models.User || mongoose.model(\"User\", userSchema);\nexport const Project = mongoose.models.Project || mongoose.model(\"Project\", projectSchema);\nexport const ProjectFile = mongoose.models.ProjectFile || mongoose.model(\"ProjectFile\", projectFileSchema);\nexport const ProjectFileContent = mongoose.models.ProjectFileContent || mongoose.model(\"ProjectFileContent\", projectFileContentSchema);\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,SAAS,yGAAA,CAAA,UAAQ,CAAC,MAAM;AAC9B,MAAM,WAAW,OAAO,KAAK,CAAC,QAAQ;AAEtC,iBAAiB;AACjB,MAAM,aAAa,IAAI,OAAO;IAC5B,UAAU;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACvD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAEA,oBAAoB;AACpB,MAAM,gBAAgB,IAAI,OAAO;IAC/B,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,OAAO;QAAE,MAAM;QAAU,KAAK;QAAQ,UAAU;IAAK;IACrD,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAEA,yBAAyB;AACzB,MAAM,oBAAoB,IAAI,OAAO;IACnC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,MAAM;QAAE,MAAM;QAAQ,SAAQ;IAAM;IACpC,SAAS;QAAE,MAAM;QAAU,KAAK;QAAW,UAAU;IAAK;IAC1D,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAEA,iCAAiC;AACjC,MAAM,2BAA2B,IAAI,OAAO;IAC1C,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,aAAa;QAAE,MAAM;QAAU,KAAK;QAAe,UAAU;QAAM,QAAQ;IAAK;IAChF,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC3C,aAAa;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC/C;AAGO,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;AAC5D,MAAM,UAAU,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAW;AACrE,MAAM,cAAc,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,eAAe;AACjF,MAAM,qBAAqB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,kBAAkB,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,sBAAsB","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///home/abhinav-reddy/Files/app/lib/mongoose.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = \"mongodb+srv://abhinav:abhinav@cluster0.dzd4wi3.mongodb.net/\"; // e.g., mongodb+srv://user:pass@cluster.mongodb.net/dbname\n\nif (!MONGODB_URI) {\n  throw new Error(\"Please define the MONGODB_URI environment variable\");\n}\n\nlet cached = (global as any).mongoose || { conn: null, promise: null };\n\nexport async function connectToDatabase() {\n  if (cached.conn) return cached.conn;\n\n  if (!cached.promise) {\n    cached.promise = mongoose.connect(MONGODB_URI, {\n      bufferCommands: false,\n    });\n  }\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,+DAA+D,2DAA2D;AAE9I,uCAAkB;;AAElB;AAEA,IAAI,SAAS,AAAC,OAAe,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAE9D,eAAe;IACpB,IAAI,OAAO,IAAI,EAAE,OAAO,OAAO,IAAI;IAEnC,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;QAClB;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/abhinav-reddy/Files/app/lib/auth.ts"],"sourcesContent":["import { User } from \"@/db/db\";\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport bcrypt from \"bcrypt\";\nimport { connectToDatabase } from \"./mongoose\";\n\nimport type { NextAuthOptions } from \"next-auth\";\n\nexport const authOptions: NextAuthOptions = {\n    providers: [\n      CredentialsProvider({\n          name: 'Credentials',\n          credentials: {\n            username: { label: \"Username\", type: \"text\", placeholder: \"abc\" },\n            email: { label: \"Email\", type: \"text\", placeholder: \"abc@gmail.com\" },\n            password: { label: \"Password\", type: \"password\" }\n          },\n          async authorize(credentials: any) {\n            await connectToDatabase();\n            // Do zod validation, OTP validation here\n            const hashedPassword = await bcrypt.hash(credentials.password, 10);\n            const existingUser = await User.findOne({\n                email: credentials.email\n            });\n\n            if (existingUser) {\n                const passwordValidation = await bcrypt.compare(credentials.password, existingUser.password);\n                if (passwordValidation) {\n                    return {\n                        id: existingUser.id.toString(),\n                        username: existingUser.username,\n                        email: existingUser.email\n                    }\n                }\n                return null;\n            }\n\n            try {\n                const user = await User.create({\n                    username: credentials.username,\n                    email: credentials.email,\n                    password: hashedPassword\n                });\n            \n                return {\n                    id: user.id.toString(),\n                    username: user.username,\n                    email: user.email\n                }\n            } catch(e) {\n                console.error(e);\n            }\n\n            return null\n          },\n        })\n    ],\n    secret: process.env.JWT_SECRET || \"secret\",\n    callbacks: {\n        async jwt({ token, user }) {\n            // Persist the user id to the token right after signin\n            if (user) {\n                token.userId = user.id;\n                token.username = typeof user.name === \"string\" ? user.name : undefined;\n            }\n            return token;\n        },\n        async session({ token, session }) {\n            // Send properties to the client\n            if (token) {\n                session.user.id = token.sub as string;\n                session.user.username = token.username as string;\n            }\n            return session;\n        }\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAIO,MAAM,cAA+B;IACxC,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;oBAAQ,aAAa;gBAAM;gBAChE,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAQ,aAAa;gBAAgB;gBACpE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAgB;gBAC9B,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD;gBACtB,yCAAyC;gBACzC,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,YAAY,QAAQ,EAAE;gBAC/D,MAAM,eAAe,MAAM,0GAAA,CAAA,OAAI,CAAC,OAAO,CAAC;oBACpC,OAAO,YAAY,KAAK;gBAC5B;gBAEA,IAAI,cAAc;oBACd,MAAM,qBAAqB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,aAAa,QAAQ;oBAC3F,IAAI,oBAAoB;wBACpB,OAAO;4BACH,IAAI,aAAa,EAAE,CAAC,QAAQ;4BAC5B,UAAU,aAAa,QAAQ;4BAC/B,OAAO,aAAa,KAAK;wBAC7B;oBACJ;oBACA,OAAO;gBACX;gBAEA,IAAI;oBACA,MAAM,OAAO,MAAM,0GAAA,CAAA,OAAI,CAAC,MAAM,CAAC;wBAC3B,UAAU,YAAY,QAAQ;wBAC9B,OAAO,YAAY,KAAK;wBACxB,UAAU;oBACd;oBAEA,OAAO;wBACH,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,UAAU,KAAK,QAAQ;wBACvB,OAAO,KAAK,KAAK;oBACrB;gBACJ,EAAE,OAAM,GAAG;oBACP,QAAQ,KAAK,CAAC;gBAClB;gBAEA,OAAO;YACT;QACF;KACH;IACD,QAAQ,QAAQ,GAAG,CAAC,UAAU,IAAI;IAClC,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,sDAAsD;YACtD,IAAI,MAAM;gBACN,MAAM,MAAM,GAAG,KAAK,EAAE;gBACtB,MAAM,QAAQ,GAAG,OAAO,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI,GAAG;YACjE;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,KAAK,EAAE,OAAO,EAAE;YAC5B,gCAAgC;YAChC,IAAI,OAAO;gBACP,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YAC1C;YACA,OAAO;QACX;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file:///home/abhinav-reddy/Files/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { authOptions } from \"@/app/lib/auth\"\nimport NextAuth from \"next-auth\"\n\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,oHAAA,CAAA,cAAW","debugId":null}}]
}